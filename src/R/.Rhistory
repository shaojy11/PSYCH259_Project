X[,i] = rnorm(nrow(X))
#choose beta as (2, 3, 4)
beta = matrix(c(1, 3, 1), ncol=1)
#generate y
prob = pnorm(X%*%beta)
y = matrix(NaN, nrow=nrow(X), ncol=1)
for(i in (1:nrow(X)))
y[i,] = rbinom(1, 1, prob[i])
#calculate the result
probit(y, X)
#generate X
X = matrix(NaN,nrow=200, ncol=3)
for(i in 1:3)
X[,i] = rnorm(nrow(X))
#choose beta as (2, 3, 4)
beta = matrix(c(1, 2, 1), ncol=1)
#generate y
prob = pnorm(X%*%beta)
y = matrix(NaN, nrow=nrow(X), ncol=1)
for(i in (1:nrow(X)))
y[i,] = rbinom(1, 1, prob[i])
#calculate the result
probit(y, X)
#generate X
X = matrix(NaN,nrow=200, ncol=3)
for(i in 1:3)
X[,i] = rnorm(nrow(X))
#choose beta as (2, 3, 4)
beta = matrix(c(1, 2, 1), ncol=1)
#generate y
prob = pnorm(X%*%beta)
y = matrix(NaN, nrow=nrow(X), ncol=1)
for(i in (1:nrow(X)))
y[i,] = rbinom(1, 1, prob[i])
#calculate the result
probit(y, X)
#generate X
X = matrix(NaN,nrow=200, ncol=3)
for(i in 1:3)
X[,i] = rnorm(nrow(X))
#choose beta as (2, 3, 4)
beta = matrix(c(1, 2, 1), ncol=1)
#generate y
prob = pnorm(X%*%beta)
y = matrix(NaN, nrow=nrow(X), ncol=1)
for(i in (1:nrow(X)))
y[i,] = rbinom(1, 1, prob[i])
#calculate the result
probit(y, X)
#generate X
X = matrix(NaN,nrow=200, ncol=3)
for(i in 1:3)
X[,i] = rnorm(nrow(X))
#choose beta as (2, 3, 4)
beta = matrix(c(1, 2, 1), ncol=1)
#generate y
prob = pnorm(X%*%beta)
y = matrix(NaN, nrow=nrow(X), ncol=1)
for(i in (1:nrow(X)))
y[i,] = rbinom(1, 1, prob[i])
#calculate the result
probit(y, X)
#generate X
X = matrix(NaN,nrow=200, ncol=3)
for(i in 1:3)
X[,i] = rnorm(nrow(X))
#choose beta as (2, 3, 4)
beta = matrix(c(1, 2, 1), ncol=1)
#generate y
prob = pnorm(X%*%beta)
y = matrix(NaN, nrow=nrow(X), ncol=1)
for(i in (1:nrow(X)))
y[i,] = rbinom(1, 1, prob[i])
#calculate the result
probit(y, X)
#generate X
X = matrix(NaN,nrow=200, ncol=3)
for(i in 1:3)
X[,i] = rnorm(nrow(X))
#choose beta as (2, 3, 4)
beta = matrix(c(1, 2, 1), ncol=1)
#generate y
prob = pnorm(X%*%beta)
y = matrix(NaN, nrow=nrow(X), ncol=1)
for(i in (1:nrow(X)))
y[i,] = rbinom(1, 1, prob[i])
#calculate the result
probit(y, X)
#generate X
X = matrix(NaN,nrow=200, ncol=3)
for(i in 1:3)
X[,i] = rnorm(nrow(X))
#choose beta as (2, 3, 4)
beta = matrix(c(1, 2, 1), ncol=1)
#generate y
prob = pnorm(X%*%beta)
y = matrix(NaN, nrow=nrow(X), ncol=1)
for(i in (1:nrow(X)))
y[i,] = rbinom(1, 1, prob[i])
#calculate the result
probit(y, X)
#generate X
X = matrix(NaN,nrow=200, ncol=3)
for(i in 1:3)
X[,i] = rnorm(nrow(X))
#choose beta as (2, 3, 4)
beta = matrix(c(1, 2, 1), ncol=1)
#generate y
prob = pnorm(X%*%beta)
y = matrix(NaN, nrow=nrow(X), ncol=1)
for(i in (1:nrow(X)))
y[i,] = rbinom(1, 1, prob[i])
#calculate the result
probit(y, X)
source('~/Documents/2017Winter/201B/hw2/hw2-2.R')
source('~/Documents/2017Winter/201B/hw2/hw2-2.R')
library(MASS)
beta_a = mvrnorm(n = 8000, mu = result$coefficients[-1],
Sigma = result$variance[-1, -1])
Itera = 8000
#the set of all the estimators
beta_b = matrix(NaN, nrow = Itera, ncol = 3)
i=1
N = nrow(X)
while(i <= Itera)
{
#There may be errors due to method BFGS, so use tryCatch
tryCatch(
{
#bootstrap sample from X, y
index = sample(1:N, N, replace = TRUE)
X_new = X[index,]
y_new = y[index, , drop=FALSE]
#calculate the new beta
beta_b[i, ] = probit(y_new, X_new)$coefficients[-1]
i = i + 1
},
error = function(e){}
)
}
#Distribution gotten from drawing entirely new samples
#
Itera2 = 8000
beta_c = matrix(NaN, nrow = Itera2, ncol = 3)
i = 1
while(i <= Itera2)
{
tryCatch(
{
#generate X, Y
new_X = matrix(NaN,nrow=200, ncol=3)
for(j in 1:3)
new_X[,j] = rnorm(nrow(new_X))
#choose beta as (1, 2, 1)
new_beta = matrix(c(1, 2, 1), ncol=1)
#generate y
prob = pnorm(new_X%*%beta)
new_y = matrix(NaN, nrow=nrow(new_X), ncol=1)
for(j in (1:nrow(new_X)))
new_y[j,] = rbinom(1, 1, prob[j])
beta_c[i, ] = probit(new_y, new_X)$coefficients[-1]
i = i + 1
},
error = function(e){}
)
}
plot(density(beta_a[,1], , bw = 0.05), col = 1, lty = 1,
xlim=c(0.25, 1.75), ylim=c(0, 2.5), main = "beta_1")
lines(density(beta_b[,1], , bw = 0.05), col = 2, lty = 2)
lines(density(beta_c[,1], , bw = 0.05), col = 4, lty = 4)
legend(x = 1.3, y = 2.5, legend = c("method a", "method b", "method c"),
col = c(1, 2, 4), lty = c(1, 2, 4))
plot(density(beta_a[,2], , bw = 0.05), col = 1, lty = 1,
xlim=c(1.25, 3.5), ylim=c(0, 1.5), main = "beta_2")
lines(density(beta_b[,2], , bw = 0.05), col = 2, lty = 2)
lines(density(beta_c[,2], , bw = 0.05), col = 4, lty = 4)
legend(x = 2.8, y = 1.5, legend = c("method a", "method b", "method c"),
col = c(1, 2, 4), lty = c(1, 2, 4))
#plot beta_2
plot(density(beta_a[,2], , bw = 0.05), col = 1, lty = 1,
xlim=c(1.25, 3.5), ylim=c(0, 1.5), main = "beta_2")
lines(density(beta_b[,2], , bw = 0.05), col = 2, lty = 2)
lines(density(beta_c[,2], , bw = 0.05), col = 4, lty = 4)
legend(x = 2.8, y = 1.5, legend = c("method a", "method b", "method c"),
col = c(1, 2, 4), lty = c(1, 2, 4))
plot(density(beta_a[,3], , bw = 0.05), col = 1, lty = 1,
xlim=c(0.4, 2.25), ylim=c(0, 2.2), main = "beta_3")
lines(density(beta_b[,3], , bw = 0.05), col = 2, lty = 2)
lines(density(beta_c[,3], , bw = 0.05), col = 4, lty = 4)
legend(x = 1.7, y = 2.0, legend = c("method a", "method b", "method c"),
col = c(1, 2, 4), lty = c(1, 2, 4))
plot(density(beta_a[,1], , bw = 0.05), col = 1, lty = 1,
xlim=c(0.25, 1.75), ylim=c(0, 2.5), main = "beta_1")
lines(density(beta_b[,1], , bw = 0.05), col = 2, lty = 2)
lines(density(beta_c[,1], , bw = 0.05), col = 4, lty = 4)
legend(x = 1.3, y = 2.5, legend = c("a", "b", "c"),
col = c(1, 2, 4), lty = c(1, 2, 4))
plot(density(beta_a[,2], , bw = 0.05), col = 1, lty = 1,
xlim=c(1.25, 3.5), ylim=c(0, 1.5), main = "beta_2")
lines(density(beta_b[,2], , bw = 0.05), col = 2, lty = 2)
lines(density(beta_c[,2], , bw = 0.05), col = 4, lty = 4)
legend(x = 2.8, y = 1.5, legend = c("a", "b", "c"),
col = c(1, 2, 4), lty = c(1, 2, 4))
plot(density(beta_a[,2], , bw = 0.05), col = 1, lty = 1,
xlim=c(0, 3.5), ylim=c(0, 3), main = "beta_2")
lines(density(beta_b[,2], , bw = 0.05), col = 2, lty = 2)
lines(density(beta_c[,2], , bw = 0.05), col = 4, lty = 4)
legend(x = 2.8, y = 1.5, legend = c("a", "b", "c"),
col = c(1, 2, 4), lty = c(1, 2, 4))
plot(density(beta_a[,2], , bw = 0.05), col = 1, lty = 1,
xlim=c(0, 3.5), ylim=c(0, 2), main = "beta_2")
lines(density(beta_b[,2], , bw = 0.05), col = 2, lty = 2)
lines(density(beta_c[,2], , bw = 0.05), col = 4, lty = 4)
legend(x = 4, y = 1.5, legend = c("a", "b", "c"),
col = c(1, 2, 4), lty = c(1, 2, 4))
plot(density(beta_a[,2], , bw = 0.05), col = 1, lty = 1,
xlim=c(0, 3.5), ylim=c(0, 2), main = "beta_2")
lines(density(beta_b[,2], , bw = 0.05), col = 2, lty = 2)
lines(density(beta_c[,2], , bw = 0.05), col = 4, lty = 4)
legend(x = 3, y = 1.5, legend = c("a", "b", "c"),
col = c(1, 2, 4), lty = c(1, 2, 4))
plot(density(beta_a[,3], , bw = 0.05), col = 1, lty = 1,
xlim=c(0.4, 2.25), ylim=c(0, 2.2), main = "beta_3")
lines(density(beta_b[,3], , bw = 0.05), col = 2, lty = 2)
lines(density(beta_c[,3], , bw = 0.05), col = 4, lty = 4)
legend(x = 1.7, y = 2.0, legend = c("a", "b", "c"),
col = c(1, 2, 4), lty = c(1, 2, 4))
plot(density(beta_a[,3], , bw = 0.05), col = 1, lty = 1,
xlim=c(0, 2), ylim=c(0, 2.5), main = "beta_3")
lines(density(beta_b[,3], , bw = 0.05), col = 2, lty = 2)
lines(density(beta_c[,3], , bw = 0.05), col = 4, lty = 4)
legend(x = 1.7, y = 2.0, legend = c("a", "b", "c"),
col = c(1, 2, 4), lty = c(1, 2, 4))
plot(density(beta_a[,2], , bw = 0.05), col = 1, lty = 1,
xlim=c(0, 3.5), ylim=c(0, 2), main = "beta_2")
lines(density(beta_b[,2], , bw = 0.05), col = 2, lty = 2)
lines(density(beta_c[,2], , bw = 0.05), col = 4, lty = 4)
legend(x = 3, y = 1.5, legend = c("a", "b", "c"),
col = c(1, 2, 4), lty = c(1, 2, 4))
source('~/Documents/2017Winter/201B/hw2/hw2-2.R')
plot(density(beta_a[,2], , bw = 0.05), col = 1, lty = 1,
xlim=c(0, 4), ylim=c(0, 2), main = "beta_2")
lines(density(beta_b[,2], , bw = 0.05), col = 2, lty = 2)
lines(density(beta_c[,2], , bw = 0.05), col = 4, lty = 4)
legend(x = 3, y = 1.5, legend = c("a", "b", "c"),
col = c(1, 2, 4), lty = c(1, 2, 4))
plot(density(beta_a[,2], , bw = 0.05), col = 1, lty = 1,
xlim=c(0, 4), ylim=c(0, 2), main = "beta_2")
lines(density(beta_b[,2], , bw = 0.05), col = 2, lty = 2)
lines(density(beta_c[,2], , bw = 0.05), col = 4, lty = 4)
legend(x = 3, y = 1.5, legend = c("a", "b", "c"),
col = c(1, 2, 4), lty = c(1, 2, 4))
plot(density(beta_a[,2], , bw = 0.05), col = 1, lty = 1,
xlim=c(0, 3.5), ylim=c(0, 2), main = "beta_2")
lines(density(beta_b[,2], , bw = 0.05), col = 2, lty = 2)
lines(density(beta_c[,2], , bw = 0.05), col = 4, lty = 4)
legend(x = 3, y = 1.5, legend = c("a", "b", "c"),
col = c(1, 2, 4), lty = c(1, 2, 4))
Iter = 8000
#generate beta from the asymptotic distribution
beta_a = mvrnorm(n = 8000, mu = result$coefficients[-1],Sigma = result$variance[-1, -1])
#generate beta from bootstrapping on the original sample
beta_b = matrix(NaN, nrow = Iter, ncol = 3)
i=1
N = nrow(X)
while(i <= Iter)
{
tryCatch(
{
#bootstrap sample from X, y
index = sample(1:N, N, replace = TRUE)
X_new = X[index,]
y_new = y[index, , drop=FALSE]
beta_b[i, ] = probit(y_new, X_new)$coefficients[-1]
i = i + 1
},
error = function(e){}
)
}
#generate beta from drawing entirely new samples
beta_c = matrix(NaN, nrow = Iter, ncol = 3)
i = 1
while(i <= Iter)
{
tryCatch(
{
#generate X, Y
new_X = matrix(rnorm(200*3),nrow=200, ncol=3)
new_beta = matrix(c(1, 2, 1), ncol=1)
#generate y
prob = pnorm(new_X%*%beta)
new_y = matrix(NaN, nrow=nrow(new_X), ncol=1)
for(j in (1:nrow(new_X)))
new_y[j,] = rbinom(1, 1, prob[j])
beta_c[i, ] = probit(new_y, new_X)$coefficients[-1]
i = i + 1
},
error = function(e){}
)
}
plot(density(beta_a[,1], , bw = 0.05), col = 1, lty = 1,
xlim=c(0.25, 1.75), ylim=c(0, 2.5), main = "beta_1")
lines(density(beta_b[,1], , bw = 0.05), col = 2, lty = 2)
lines(density(beta_c[,1], , bw = 0.05), col = 4, lty = 4)
legend(x = 1.3, y = 2.5, legend = c("a", "b", "c"),
col = c(1, 2, 4), lty = c(1, 2, 4))
plot(density(beta_a[,2], , bw = 0.05), col = 1, lty = 1,
xlim=c(0, 4), ylim=c(0, 2), main = "beta_2")
lines(density(beta_b[,2], , bw = 0.05), col = 2, lty = 2)
lines(density(beta_c[,2], , bw = 0.05), col = 4, lty = 4)
legend(x = 3, y = 1.5, legend = c("a", "b", "c"),
col = c(1, 2, 4), lty = c(1, 2, 4))
plot(density(beta_a[,3], , bw = 0.05), col = 1, lty = 1,
xlim=c(0, 2), ylim=c(0, 2.5), main = "beta_3")
lines(density(beta_b[,3], , bw = 0.05), col = 2, lty = 2)
lines(density(beta_c[,3], , bw = 0.05), col = 4, lty = 4)
legend(x = 1.7, y = 2.0, legend = c("a", "b", "c"),
col = c(1, 2, 4), lty = c(1, 2, 4))
View(beta_c)
source('~/Documents/2017Winter/201B/hw2/hw2-3.R')
source('~/Documents/2017Winter/201B/hw2/hw2-3.R')
source('~/Documents/2017Winter/201B/hw2/hw2-3.R')
res
res = glm.lik(X, Y)
res = glm.lik(X, Y)
source('~/Documents/2017Winter/201B/hw2/hw2-3.R')
source('~/Documents/2017Winter/201B/hw2/hw2-3.R')
install.packages("sandwich")
library(sandwich)
source('~/Documents/2017Winter/201B/hw2/hw2-3.R')
install.packages("lmtest")
library(lmtest)
source('~/Documents/2017Winter/201B/hw2/hw2-3.R')
ml<- glm(Y~X,family=poisson(link = "log"))
ml
bread = vcov(ml)
score = estfun(ml)
score
round(coeftest(ml,sandwich),4)
ml<- glm(Y~X,family=poisson(link = "log"))
bread = vcov(ml)
score = estfun(ml)
meat = t(score)%*%score
sandwich = bread%*%meat%*%bread
round(coeftest(ml,sandwich),4)
ml<- glm(Y~X,family=poisson(link = "log"))
bread = vcov(ml)
score = estfun(ml)
meat = t(score)%*%score
sandwich = bread%*%meat%*%bread
round(coeftest(ml,sandwich),4)
X <- rnorm(1000,mean=0,sd=1)
Y <- rnbinom(1000,size = 1/3, mu = exp(X/100))
# likelihood function of Possion regression
glm.lik<- function(X,y){
ml<- glm(Y~X,family=poisson(link = "log"))
print(summary(ml))
res <- list("beta" = summary(ml)$coefficients[2, 1],"error" = summary(ml)$coefficients[2, 2])
return(res)
}
res = glm.lik(X, Y)
X <- rnorm(1000,mean=0,sd=1)
Y <- rnbinom(1000,size = 1/3, mu = exp(X/100))
glm.lik<- function(X,y){
ml<- glm(Y~X,family=poisson(link = "log"))
print(summary(ml))
res <- list("beta" = summary(ml)$coefficients[2, 1],"error" = summary(ml)$coefficients[2, 2])
return(res)
}
res = glm.lik(X, Y)
ml<- glm(Y~X,family=poisson(link = "log"))
bread = vcov(ml)
score = estfun(ml)
meat = t(score)%*%score
sandwich = bread%*%meat%*%bread
round(coeftest(ml,sandwich),4)
X <- rnorm(1000,mean=0,sd=1)
Y <- rnbinom(1000,size = 1/3, mu = exp(X/100))
glm.lik<- function(X,y){
ml<- glm(Y~X,family=poisson(link = "log"))
print(summary(ml))
res <- list("beta" = summary(ml)$coefficients[2, 1],"error" = summary(ml)$coefficients[2, 2])
return(res)
}
res = glm.lik(X, Y)
ml<- glm(Y~X,family=poisson(link = "log"))
bread = vcov(ml)
score = estfun(ml)
meat = t(score)%*%score
sandwich = bread%*%meat%*%bread
round(coeftest(ml,sandwich),4)
source('~/Documents/2017Winter/201B/hw2/hw2-3.R')
source('~/Documents/2017Winter/201B/hw2/hw2-3.R')
source('~/Documents/2017Winter/201B/hw2/hw2-3.R')
source('~/Documents/2017Winter/201B/hw2/hw2-3.R')
source('~/Documents/2017Winter/201B/hw2/hw2-3.R')
glm.lik<- function(X,y){
ml<- glm(Y~X,family=poisson(link = "log"))
# print(summary(ml))
res <- list("beta" = summary(ml)$coefficients[2, 1],"error" = summary(ml)$coefficients[2, 2])
return(res)
}
iters = 10^4
est_list <- vector("list", iters)
for(iter in 1:iters){
X <- rnorm(1000, mean=0,sd=1)
Y <- rnbinom(1000, size = 1/3, mu = exp(X/100))
res = glm.lik(X,Y)
est_list[iter] = res$beta.est
}
plot(density.default(x = as.numeric(est_list)),lwd = 2,
main = 'Density of all the coefficient estimates',
xlab = 'estimate',ylab = 'density')
stderr = sd(as.numeric(est_list))/sqrt(length(est_list))
plot(density.default(x = as.numeric(est_list)),lwd = 2,
main = 'Density of all the coefficient estimates',
xlab = 'estimate',ylab = 'density')
x <- c(0 ,iters)
x <- rep(0 ,iters)
iters = 10^4
est_list <- rep(0, iters)
for(iter in 1:iters){
X <- rnorm(1000, mean=0,sd=1)
Y <- rnbinom(1000, size = 1/3, mu = exp(X/100))
res = glm.lik(X,Y)
est_list[iter] = res$beta.est
}
res$beta
iters = 10^4
est_list <- rep(0, iters)
for(iter in 1:iters){
X <- rnorm(1000, mean=0,sd=1)
Y <- rnbinom(1000, size = 1/3, mu = exp(X/100))
res = glm.lik(X,Y)
est_list[iter] = res$beta
}
plot(density.default(x = as.numeric(est_list)),lwd = 2,
main = 'Density of all the coefficient estimates',
xlab = 'estimate',ylab = 'density')
stderr = sd(est_list)/sqrt(length(est_list))
stderr
plot(est_list,lwd = 2,
main = 'Density of all the coefficient estimates',
xlab = 'estimate',ylab = 'density')
plot(density.default(x = est_list),lwd = 2,
main = 'Density of all the coefficient estimates',
xlab = 'estimate',ylab = 'density')
install.packages("WriteXLS")
library(WriteXLS)
data <- read.xls("/Users/Download/Roaster100A.xls")
data <- read.xlsx("/Users/Download/Roaster100A.xls")
data <- read.table("/Users/Download/Roaster100A.xls")
data <- read.table("/Users/shaojy11/Download/Roaster100A.xls")
data <- read.table("/Usrs/shaojy11/Download/Roaster100A.xls")
data <- read.table("/Usr/shaojy11/Download/Roaster100A.xls")
data <- read.table("/Users/shaojy11/Downloads/Roaster100A.xls")
data <- read.table("/Users/shaojy11/Downloads/Roster100A.xls")
install.packages("readxl")
library(readxl)
datasets <- system.file("/Users/shaojy11/Downloads/Roster100A.xls", package = "readxl")read_excel(datasets)
datasets <- system.file("/Users/shaojy11/Downloads/Roster100A.xls", package = "readxl")
read_excel(datasets)
datasets <- system.file("Downloads/Roster100A.xls", package = "readxl")
read_excel(datasets)
read_excel("/Users/shaojy11/Downloads/Roster100A.xls")
data <- read_excel("/Users/shaojy11/Downloads/Roster100A.xls")
View(data)
data.name <- as.data.frame(data[,3])
View(data.name)
write.csv(data.name,"newRoster.csv")
pwd
write.table(data.name, "Desktop/newRoster.txt")
write.table(data.name, "Desktop/newRoster.txt")
write.table(data.name, "Desktop/newRoster.txt",sep="\t",row.names=FALSE)
write.table(data.name, "Desktop/newRoster.txt",sep="\t",row.names=FALSE)
data.name1 <- read.table("/Users/shaojy11/Desktop/newRoster1.txt")
View(data.name1)
data.name1 <- read.table("/Users/shaojy11/Desktop/newRoster1.txt")
data[,2] = data.name1
View(data)
data.name2 <- read.table("/Users/shaojy11/Desktop/newRoster1.txt")
data.name2 <- read.table("/Users/shaojy11/Desktop/newRoster1.txt")
View(data.name2)
data[,3] = data.name2
write.csv(data, "/Users/shaojy11/Desktop/newRoster1.csv")
read_excel("/Users/shaojy11/Downloads/Roster100A.xls")
brader = read.csv("../../databrader.csv")
voice = read.csv("../../voice.csv")
voice = read.csv("../../data/voice.csv")
setwd('/Users/shaojy11/Documents/2017Spring/259/PSYCH259_Project/src/R')
voice = read.csv("/Users/shaojy11/Documents/2017Spring/259/PSYCH259_Project/data/voice.csv")
voice = na.omit(voice)
test = data[(nrow(data) * 0.7 + 1) : nrow(data),]
test = voice[(nrow(voice) * 0.7 + 1) : nrow(voice),]
test = voice[(nrow(voice) * 0.7 + 1) : nrow(voice),]
source('~/Documents/2017Spring/259/PSYCH259_Project/src/R/categorization.R')
train = voice[1: (nrow(voice) * factor),]
source('~/Documents/2017Spring/259/PSYCH259_Project/src/R/categorization.R')
source('~/Documents/2017Spring/259/PSYCH259_Project/src/R/categorization.R')
source('~/Documents/2017Spring/259/PSYCH259_Project/src/R/categorization.R')
pred<-predict(rfmodel,newdata=test)
table(pred, test$label)
plot(margin(rfmodel), test$label)
test.rferr <- 1 - sum(test$label == pred) / dim(test)[1]
oob.rferr <- rfmodel$err.rate[1000,1]
oob.rferr <- rfmodel$err.rate[dim(err.rate)[1],1]
oob.rferr <- rfmodel$err.rate[dim(rfmodel$err.rate)[1],1]
source('~/Documents/2017Spring/259/PSYCH259_Project/src/R/categorization.R')
source('~/Documents/2017Spring/259/PSYCH259_Project/src/R/categorization.R')
source('~/Documents/2017Spring/259/PSYCH259_Project/src/R/categorization.R')
table(predict(rf.model), train$label)
table(predict(rf.model), test$label)
